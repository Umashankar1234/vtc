{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TwitterTweetUrl = exports.defaultTwitterBaseUrl = exports.defaultTwitterUrlOptions = undefined;\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _queryString = require('query-string');\n\nvar _queryString2 = _interopRequireDefault(_queryString);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar defaultTwitterUrlOptions = exports.defaultTwitterUrlOptions = {\n  link: typeof document !== 'undefined' ? document.location.href : null,\n  text: null,\n  hashtags: null,\n  via: null,\n  related: null,\n  customQueryParams: null\n};\nvar defaultTwitterBaseUrl = exports.defaultTwitterBaseUrl = 'https://twitter.com/intent/tweet';\n\nvar TwitterTweetUrl = exports.TwitterTweetUrl = function () {\n  function TwitterTweetUrl() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var baseUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultTwitterBaseUrl;\n    (0, _classCallCheck3.default)(this, TwitterTweetUrl);\n\n    if (!_lodash2.default.isObject(options) || _lodash2.default.isArray(options)) {\n      throw new Error('Provided options can only be of type object');\n    }\n\n    this.options = Object.assign({}, defaultTwitterUrlOptions, options); // Sometimes the defaultTwitterUrlOptions will be defined before the browser is ready which evaluates the link to\n    // null, and if the link is null the toUrl() call won't work. So this is to make sure the options.link is defined.\n\n    if (_lodash2.default.isNil(this.options.link) && typeof document !== 'undefined') {\n      this.options.link = document.location.href;\n    }\n\n    if (!_lodash2.default.isString(baseUrl)) {\n      throw new Error('Provided baseUrl can only be of type string');\n    } // Changed the base url to 'https://twitter.com/intent/tweet' instead of 'https://twitter.com/share'\n    // Because /share adds the 'original_referer' param and forwards it to 'https://twitter.com/intent/tweet'\n\n\n    this.baseUrl = baseUrl;\n  }\n  /**\n   * Converts an array into a comma separated list.\n   *\n   * format: input => output\n   * e.g ['test', 'test ', ''] => 'test,test'\n   * or ['test'] => 'test'\n   *\n   * @param strOrArr\n   * @returns {string}\n   */\n\n\n  (0, _createClass3.default)(TwitterTweetUrl, [{\n    key: 'toUrl',\n\n    /**\n     * Converts the options into a url based on the button parameter reference:\n     * https://developer.twitter.com/en/docs/twitter-for-websites/tweet-button/guides/parameter-reference1\n     *\n     * @returns {string}\n     */\n    value: function toUrl() {\n      // Check if options.link is a string\n      if (!_lodash2.default.isString(this.options.link)) {\n        throw new Error('options.link can only be in string format');\n      }\n\n      var params = {\n        url: this.options.link\n      }; // Set the baseUrl with the link url.\n\n      var url = this.baseUrl; // Check if there is text and then adds that text as a param to the url.\n\n      if (!_lodash2.default.isNil(this.options.text)) {\n        // Check if options.text is a string.\n        if (!_lodash2.default.isString(this.options.text)) {\n          throw new Error('options.text can only be in string format');\n        }\n\n        params.text = this.options.text;\n      } // Checks if hashtags are provided.\n\n\n      if (!_lodash2.default.isNil(this.options.hashtags)) {\n        // Check if options.hashtags has the correct type.\n        if (!(_lodash2.default.isArray(this.options.hashtags) || _lodash2.default.isString(this.options.hashtags))) {\n          throw new Error('options.hashtags can only be in array or string format');\n        }\n\n        var hashtags = null;\n\n        if (_lodash2.default.isArray(this.options.hashtags)) {\n          hashtags = TwitterTweetUrl.arrayToCommaSeparatedList(this.options.hashtags);\n        } else if (_lodash2.default.isString(this.options.hashtags)) {\n          hashtags = TwitterTweetUrl.stringToCommaSeparatedList(this.options.hashtags);\n        }\n\n        if (hashtags !== null) {\n          params.hashtags = hashtags;\n        }\n      } // Check if options.via is provided.\n\n\n      if (!_lodash2.default.isNil(this.options.via)) {\n        // Check if via is of the correct type.\n        if (!_lodash2.default.isString(this.options.via)) {\n          throw new Error('options.via can only be in string format');\n        }\n\n        params.via = this.options.via;\n      } // Check if options.related is provided.\n\n\n      if (!_lodash2.default.isNil(this.options.related)) {\n        // Check if options.related is a array or string.\n        if (!(_lodash2.default.isArray(this.options.related) || _lodash2.default.isString(this.options.related))) {\n          throw new Error('options.related can only be in array or string format');\n        }\n\n        var related = null;\n\n        if (_lodash2.default.isArray(this.options.related)) {\n          related = TwitterTweetUrl.arrayToCommaSeparatedList(this.options.related);\n        } else if (_lodash2.default.isString(this.options.related)) {\n          related = TwitterTweetUrl.stringToCommaSeparatedList(this.options.related);\n        }\n\n        if (related !== null) {\n          params.related = related;\n        }\n      }\n\n      var other = ''; // Check if other is provided.\n\n      if (!_lodash2.default.isNil(this.options.customQueryParams)) {\n        // Check if the options.customQueryParams is a object or a string\n        if (!(_lodash2.default.isObject(this.options.customQueryParams) || _lodash2.default.isString(this.options.customQueryParams)) || _lodash2.default.isArray(this.options.customQueryParams)) {\n          throw new Error('options.customQueryParams can only be in object or string format');\n        }\n\n        if (_lodash2.default.isObject(this.options.customQueryParams)) {\n          other = _queryString2.default.stringify(this.options.customQueryParams);\n        } else if (_lodash2.default.isString(this.options.customQueryParams)) {\n          other = _queryString2.default.stringify(_queryString2.default.parse(this.options.customQueryParams));\n        }\n      }\n\n      if (Object.keys(params).length > 0) {\n        url += '?' + _queryString2.default.stringify(params);\n\n        if (other.trim() !== '') {\n          url += '&' + other;\n        }\n      } else if (other.trim() !== '') {\n        url += '?' + other;\n      }\n\n      return url;\n    }\n  }], [{\n    key: 'arrayToCommaSeparatedList',\n    value: function arrayToCommaSeparatedList() {\n      var strOrArr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      if (!(_lodash2.default.isArray(strOrArr) || _lodash2.default.isString(strOrArr))) {\n        throw new Error('Can only provide string or array');\n      }\n\n      if (_lodash2.default.isString(strOrArr)) {\n        strOrArr = [strOrArr];\n      }\n\n      var str = strOrArr.filter(function (item) {\n        return _lodash2.default.isString(item) || _lodash2.default.isNumber(item);\n      }).map(function (item) {\n        return item.toString().trim();\n      }).filter(function (item) {\n        return item !== '';\n      }).join(',');\n      return str;\n    }\n    /**\n     * Converts a string into a comma separated list\n     *\n     * format: input => output\n     * e.g 'test, test,' => 'test,test'\n     * or 'test, test' => 'test,test'\n     * or 'test test' => 'test,test'\n     * or 'test' => 'test'\n     *\n     * @param str\n     * @returns {string}\n     */\n\n  }, {\n    key: 'stringToCommaSeparatedList',\n    value: function stringToCommaSeparatedList() {\n      var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n      if (!_lodash2.default.isString(str)) {\n        throw new Error('Can only provide string');\n      }\n\n      str = str.trim().split(',').join(' ').split(' ').filter(function (item) {\n        return item.trim() !== '';\n      }).map(function (item) {\n        return item.trim();\n      }).join(',');\n      return str;\n    }\n  }]);\n  return TwitterTweetUrl;\n}();","map":{"version":3,"sources":["../src/twitter-tweet-url.js"],"names":["defaultTwitterUrlOptions","link","document","text","hashtags","via","related","customQueryParams","defaultTwitterBaseUrl","TwitterTweetUrl","options","baseUrl","_","Object","strOrArr","str","item","params","url","other","queryString"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport queryString from 'query-string';\n\nexport const defaultTwitterUrlOptions = {\n\tlink: typeof document !== 'undefined' ? document.location.href : null,\n\ttext: null,\n\thashtags: null,\n\tvia: null,\n\trelated: null,\n\tcustomQueryParams: null\n};\nexport const defaultTwitterBaseUrl = 'https://twitter.com/intent/tweet';\n\nexport class TwitterTweetUrl {\n\n\tconstructor(options = {}, baseUrl = defaultTwitterBaseUrl) {\n\t\tif (!_.isObject(options) || _.isArray(options)) {\n\t\t\tthrow new Error('Provided options can only be of type object');\n\t\t}\n\n\t\tthis.options = Object.assign({}, defaultTwitterUrlOptions, options);\n\n\t\t// Sometimes the defaultTwitterUrlOptions will be defined before the browser is ready which evaluates the link to\n\t\t// null, and if the link is null the toUrl() call won't work. So this is to make sure the options.link is defined.\n\t\tif (_.isNil(this.options.link) && typeof document !== 'undefined') {\n\t\t\tthis.options.link = document.location.href;\n\t\t}\n\n\t\tif (!_.isString(baseUrl)) {\n\t\t\tthrow new Error('Provided baseUrl can only be of type string');\n\t\t}\n\n\t\t// Changed the base url to 'https://twitter.com/intent/tweet' instead of 'https://twitter.com/share'\n\t\t// Because /share adds the 'original_referer' param and forwards it to 'https://twitter.com/intent/tweet'\n\t\tthis.baseUrl = baseUrl;\n\t}\n\n\t/**\n\t * Converts an array into a comma separated list.\n\t *\n\t * format: input => output\n\t * e.g ['test', 'test ', ''] => 'test,test'\n\t * or ['test'] => 'test'\n\t *\n\t * @param strOrArr\n\t * @returns {string}\n\t */\n\tstatic arrayToCommaSeparatedList(strOrArr = []) {\n\t\tif (!(_.isArray(strOrArr) || _.isString(strOrArr))) {\n\t\t\tthrow new Error('Can only provide string or array');\n\t\t}\n\n\t\tif (_.isString(strOrArr)) {\n\t\t\tstrOrArr = [strOrArr];\n\t\t}\n\n\t\tconst str = strOrArr\n\t\t\t.filter((item) => _.isString(item) || _.isNumber(item))\n\t\t\t.map((item) => item.toString().trim())\n\t\t\t.filter((item) => item !== '')\n\t\t\t.join(',');\n\n\t\treturn str;\n\t}\n\n\t/**\n\t * Converts a string into a comma separated list\n\t *\n\t * format: input => output\n\t * e.g 'test, test,' => 'test,test'\n\t * or 'test, test' => 'test,test'\n\t * or 'test test' => 'test,test'\n\t * or 'test' => 'test'\n\t *\n\t * @param str\n\t * @returns {string}\n\t */\n\tstatic stringToCommaSeparatedList(str = '') {\n\t\tif (!_.isString(str)) {\n\t\t\tthrow new Error('Can only provide string');\n\t\t}\n\n\t\tstr = str\n\t\t\t.trim()\n\t\t\t.split(',')\n\t\t\t.join(' ')\n\t\t\t.split(' ')\n\t\t\t.filter((item) => item.trim() !== '')\n\t\t\t.map((item) => item.trim())\n\t\t\t.join(',');\n\n\t\treturn str;\n\t}\n\n\t/**\n\t * Converts the options into a url based on the button parameter reference:\n\t * https://developer.twitter.com/en/docs/twitter-for-websites/tweet-button/guides/parameter-reference1\n\t *\n\t * @returns {string}\n\t */\n\ttoUrl() {\n\n\t\t// Check if options.link is a string\n\t\tif (!_.isString(this.options.link)) {\n\t\t\tthrow new Error('options.link can only be in string format');\n\t\t}\n\n\t\tlet params = {\n\t\t\turl: this.options.link\n\t\t};\n\n\t\t// Set the baseUrl with the link url.\n\t\tlet url = this.baseUrl;\n\n\t\t// Check if there is text and then adds that text as a param to the url.\n\t\tif (!_.isNil(this.options.text)) {\n\t\t\t// Check if options.text is a string.\n\t\t\tif (!_.isString(this.options.text)) {\n\t\t\t\tthrow new Error('options.text can only be in string format');\n\t\t\t}\n\n\t\t\tparams.text = this.options.text;\n\t\t}\n\n\t\t// Checks if hashtags are provided.\n\t\tif (!_.isNil(this.options.hashtags)) {\n\t\t\t// Check if options.hashtags has the correct type.\n\t\t\tif (!(_.isArray(this.options.hashtags) || _.isString(this.options.hashtags))) {\n\t\t\t\tthrow new Error('options.hashtags can only be in array or string format');\n\t\t\t}\n\n\t\t\tlet hashtags = null;\n\t\t\tif (_.isArray(this.options.hashtags)) {\n\t\t\t\thashtags = TwitterTweetUrl.arrayToCommaSeparatedList(this.options.hashtags);\n\t\t\t} else if (_.isString(this.options.hashtags)) {\n\t\t\t\thashtags = TwitterTweetUrl.stringToCommaSeparatedList(this.options.hashtags);\n\t\t\t}\n\n\t\t\tif (hashtags !== null) {\n\t\t\t\tparams.hashtags = hashtags;\n\t\t\t}\n\n\t\t}\n\n\t\t// Check if options.via is provided.\n\t\tif (!_.isNil(this.options.via)) {\n\t\t\t// Check if via is of the correct type.\n\t\t\tif (!_.isString(this.options.via)) {\n\t\t\t\tthrow new Error('options.via can only be in string format');\n\t\t\t}\n\n\t\t\tparams.via = this.options.via;\n\t\t}\n\n\t\t// Check if options.related is provided.\n\t\tif (!_.isNil(this.options.related)) {\n\t\t\t// Check if options.related is a array or string.\n\t\t\tif (!(_.isArray(this.options.related) || _.isString(this.options.related))) {\n\t\t\t\tthrow new Error('options.related can only be in array or string format');\n\t\t\t}\n\n\t\t\tlet related = null;\n\t\t\tif (_.isArray(this.options.related)) {\n\t\t\t\trelated = TwitterTweetUrl.arrayToCommaSeparatedList(this.options.related);\n\t\t\t} else if (_.isString(this.options.related)) {\n\t\t\t\trelated = TwitterTweetUrl.stringToCommaSeparatedList(this.options.related);\n\t\t\t}\n\n\t\t\tif (related !== null) {\n\t\t\t\tparams.related = related;\n\t\t\t}\n\t\t}\n\n\t\tlet other = '';\n\t\t// Check if other is provided.\n\t\tif (!_.isNil(this.options.customQueryParams)) {\n\t\t\t// Check if the options.customQueryParams is a object or a string\n\t\t\tif (\n\t\t\t\t!(_.isObject(this.options.customQueryParams) || _.isString(this.options.customQueryParams)) ||\n\t\t\t\t_.isArray(this.options.customQueryParams)\n\t\t\t) {\n\t\t\t\tthrow new Error('options.customQueryParams can only be in object or string format');\n\t\t\t}\n\n\t\t\tif (_.isObject(this.options.customQueryParams)) {\n\t\t\t\tother = queryString.stringify(this.options.customQueryParams);\n\t\t\t} else if (_.isString(this.options.customQueryParams)) {\n\t\t\t\tother = queryString.stringify(queryString.parse(this.options.customQueryParams));\n\t\t\t}\n\t\t}\n\n\t\tif (Object.keys(params).length > 0) {\n\t\t\turl += `?${queryString.stringify(params)}`;\n\n\t\t\tif (other.trim() !== '') {\n\t\t\t\turl += `&${other}`;\n\t\t\t}\n\t\t} else if (other.trim() !== '') {\n\t\t\turl += `?${other}`;\n\t\t}\n\n\t\treturn url;\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}