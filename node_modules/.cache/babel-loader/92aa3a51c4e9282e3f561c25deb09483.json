{"ast":null,"code":"import React from \"react\";\n\nvar CryptoJS = require(\"crypto-js\");\n\nconst AESKEY = \"873518d8d7a146f184173f87b86ffc35\";\nexport const AuthContext = /*#__PURE__*/React.createContext();\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case \"LOGIN\":\n      console.log(action.payload.user);\n      var cipherUser = CryptoJS.AES.encrypt(action.payload.user, AESKEY).toString();\n      localStorage.setItem(\"user\", cipherUser);\n      localStorage.setItem(\"token\", cipherUser);\n      return { ...state,\n        isAuthenticated: true,\n        user: action.payload.user,\n        token: action.payload.user\n      };\n\n    case \"LOGOUT\":\n      // localStorage.clear();\n      localStorage.removeItem(\"user\");\n      localStorage.removeItem(\"token\");\n      return { ...state,\n        isAuthenticated: false,\n        user: null,\n        token: null\n      };\n\n    case \"TWITTER\":\n      localStorage.setItem(\"twitter\", action.payload);\n      return { ...state,\n        isAuthenticated: true,\n        twitter: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\nexport function CheckRouteAccess(pathname) {\n  var encKey = \"873518d8d7a146f184173f87b86ffc35\";\n  var userbytes = localStorage.getItem(\"user\") && CryptoJS.AES.decrypt(localStorage.getItem(\"user\"), encKey);\n  let user = userbytes && userbytes.toString(CryptoJS.enc.Utf8);\n  if (user) return true;else return false;\n}\n_c = CheckRouteAccess;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckRouteAccess\");","map":{"version":3,"sources":["C:/Users/user/Desktop/Uma/vtc/src/CommonMethods/Authentication.js"],"names":["React","CryptoJS","require","AESKEY","AuthContext","createContext","reducer","state","action","type","console","log","payload","user","cipherUser","AES","encrypt","toString","localStorage","setItem","isAuthenticated","token","removeItem","twitter","CheckRouteAccess","pathname","encKey","userbytes","getItem","decrypt","enc","Utf8"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AACA,IAAIC,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AACA,MAAMC,MAAM,GAAG,kCAAf;AACA,OAAO,MAAMC,WAAW,gBAAGJ,KAAK,CAACK,aAAN,EAApB;AACP,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAExC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,OAAL;AACEC,MAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACI,OAAP,CAAeC,IAA3B;AACA,UAAIC,UAAU,GAAGb,QAAQ,CAACc,GAAT,CAAaC,OAAb,CACdR,MAAM,CAACI,OAAP,CAAeC,IADD,EAEfV,MAFe,EAGfc,QAHe,EAAjB;AAIAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BL,UAA7B;AACAI,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BL,UAA9B;AACA,aAAO,EACL,GAAGP,KADE;AAELa,QAAAA,eAAe,EAAE,IAFZ;AAGLP,QAAAA,IAAI,EAAEL,MAAM,CAACI,OAAP,CAAeC,IAHhB;AAILQ,QAAAA,KAAK,EAAEb,MAAM,CAACI,OAAP,CAAeC;AAJjB,OAAP;;AAMF,SAAK,QAAL;AACE;AACAK,MAAAA,YAAY,CAACI,UAAb,CAAwB,MAAxB;AACAJ,MAAAA,YAAY,CAACI,UAAb,CAAwB,OAAxB;AACA,aAAO,EACL,GAAGf,KADE;AAELa,QAAAA,eAAe,EAAE,KAFZ;AAGLP,QAAAA,IAAI,EAAE,IAHD;AAILQ,QAAAA,KAAK,EAAE;AAJF,OAAP;;AAMF,SAAK,SAAL;AACEH,MAAAA,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAgCX,MAAM,CAACI,OAAvC;AACA,aAAO,EACL,GAAGL,KADE;AAELa,QAAAA,eAAe,EAAE,IAFZ;AAGLG,QAAAA,OAAO,EAAEf,MAAM,CAACI;AAHX,OAAP;;AAKF;AACE,aAAOL,KAAP;AAjCJ;AAmCD,CArCM;AAsCP,OAAO,SAASiB,gBAAT,CAA0BC,QAA1B,EAAoC;AACzC,MAAIC,MAAM,GAAG,kCAAb;AACA,MAAIC,SAAS,GACXT,YAAY,CAACU,OAAb,CAAqB,MAArB,KACA3B,QAAQ,CAACc,GAAT,CAAac,OAAb,CAAqBX,YAAY,CAACU,OAAb,CAAqB,MAArB,CAArB,EAAmDF,MAAnD,CAFF;AAGA,MAAIb,IAAI,GAAGc,SAAS,IAAIA,SAAS,CAACV,QAAV,CAAmBhB,QAAQ,CAAC6B,GAAT,CAAaC,IAAhC,CAAxB;AACA,MAAIlB,IAAJ,EAAU,OAAO,IAAP,CAAV,KACK,OAAO,KAAP;AACN;KAReW,gB","sourcesContent":["import React from \"react\";\nvar CryptoJS = require(\"crypto-js\");\nconst AESKEY = \"873518d8d7a146f184173f87b86ffc35\";\nexport const AuthContext = React.createContext();\nexport const reducer = (state, action) => {\n\n  switch (action.type) {\n    case \"LOGIN\":\n      console.log(action.payload.user);\n      var cipherUser = CryptoJS.AES.encrypt(\n        (action.payload.user),\n        AESKEY\n      ).toString();\n      localStorage.setItem(\"user\", cipherUser);\n      localStorage.setItem(\"token\", cipherUser);\n      return {\n        ...state,\n        isAuthenticated: true,\n        user: action.payload.user,\n        token: action.payload.user\n      };\n    case \"LOGOUT\":\n      // localStorage.clear();\n      localStorage.removeItem(\"user\");\n      localStorage.removeItem(\"token\");\n      return {\n        ...state,\n        isAuthenticated: false,\n        user: null,\n        token: null\n      };\n    case \"TWITTER\":\n      localStorage.setItem(\"twitter\", action.payload);\n      return {\n        ...state,\n        isAuthenticated: true,\n        twitter: action.payload,\n      };\n    default:\n      return state;\n  }\n};\nexport function CheckRouteAccess(pathname) {\n  var encKey = \"873518d8d7a146f184173f87b86ffc35\";\n  var userbytes =\n    localStorage.getItem(\"user\") &&\n    CryptoJS.AES.decrypt(localStorage.getItem(\"user\"), encKey);\n  let user = userbytes && userbytes.toString(CryptoJS.enc.Utf8);\n  if (user) return true;\n  else return false;\n}"]},"metadata":{},"sourceType":"module"}