'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var PropTypes = _interopDefault(require('prop-types'));
var React = require('react');
var React__default = _interopDefault(React);
require('../../../../../disk/captcha.css');

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

function getRandomInt(min, max) {
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min)) + min;
}

function genetateCaptcha(max) {
  var text = '';
  var i = void 0;
  for (i = 0; i < max; i += 1) {
    switch (Math.floor(Math.random() * 3)) {
      case 0:
        text += String.fromCharCode(48 + Math.floor(Math.random() * 10));break;
      case 1:
        text += String.fromCharCode(65 + Math.floor(Math.random() * 26));break;
      case 2:
        text += String.fromCharCode(97 + Math.floor(Math.random() * 26));break;
      default:
        break;
    }
  }
  return text;
}

var Captcha = function (_Component) {
  inherits(Captcha, _Component);

  function Captcha() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, Captcha);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = Captcha.__proto__ || Object.getPrototypeOf(Captcha)).call.apply(_ref, [this].concat(args))), _this), _this.state = { solution: genetateCaptcha(_this.props.length), input: '' }, _this.componentDidMount = function () {
      _this.drawCaptcha();
    }, _this.drawCaptcha = function () {
      var solution = _this.state.solution;
      var _this$canvas = _this.canvas,
          width = _this$canvas.width,
          height = _this$canvas.height;

      var ctx = _this.canvas.getContext('2d');
      ctx.clearRect(0, 0, width, height);
      ctx.font = getRandomInt(30, 40) + 'px serif';
      ctx.textAlign = 'center';
      ctx.textBaseline = 'middle';
      ctx.fillText(solution, width / 2, height / 2 + 3);
      ctx.strokeStyle = 'purple';

      ctx.beginPath(), ctx.moveTo(getRandomInt(5, 20), getRandomInt(5, 20)), ctx.lineTo(width - getRandomInt(5, 20), height - getRandomInt(5, 20)), ctx.stroke(), ctx.moveTo(getRandomInt(15, 30), getRandomInt(15, 30)), ctx.lineTo(width - getRandomInt(15, 30), height - getRandomInt(15, 30)), ctx.stroke(), ctx.moveTo(getRandomInt(5, 20), height - getRandomInt(5, 20)), ctx.lineTo(width - getRandomInt(5, 20), getRandomInt(5, 20)), ctx.stroke(), ctx.moveTo(getRandomInt(15, 30), height - getRandomInt(15, 30)), ctx.lineTo(width - getRandomInt(15, 30), getRandomInt(15, 30)), ctx.stroke(), ctx.moveTo(getRandomInt(width / 10, width / 10 + 10), height - getRandomInt(15, 30)), ctx.lineTo(getRandomInt(width / 2, width / 2 + 10), getRandomInt(5, 20)), ctx.stroke(), ctx.closePath();
    }, _this.refresh = function () {
      _this.setState({
        solution: genetateCaptcha(_this.props.length),
        input: ''
      }, function () {
        return _this.drawCaptcha();
      });
    }, _this.playAudio = function () {
      var solution = _this.state.solution;

      var audio = new SpeechSynthesisUtterance(solution.toString().split('').join(' '));
      audio.rate = 0.6;
      window.speechSynthesis.speak(audio);
    }, _this.handleChange = function (e) {
      var onChange = _this.props.onChange;
      var solution = _this.state.solution;

      _this.setState({ input: e.target.value });
      onChange(e.target.value === solution.toString());
    }, _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(Captcha, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var placeholder = this.props.placeholder;
      var input = this.state.input;


      return React__default.createElement(
        'div',
        { className: 'rnc' },
        React__default.createElement(
          'div',
          { className: 'rnc-row' },
          React__default.createElement('canvas', {
            ref: function ref(el) {
              return _this2.canvas = el;
            },
            width: 200,
            height: 50,
            className: 'rnc-canvas',
            'data-testid': 'captcha-canvas'
          }),
          React__default.createElement(
            'div',
            { className: 'rnc-column' },
            React__default.createElement(
              'button',
              {
                type: 'button',
                'aria-label': 'get new captcha',
                onClick: this.refresh,
                className: 'rnc-button',
                'data-testid': 'captcha-refresh'
              },
              React__default.createElement(
                'svg',
                { xmlns: 'http://www.w3.org/2000/svg', viewBox: '0 0 24 24' },
                React__default.createElement(
                  'g',
                  { 'data-name': 'Layer 2' },
                  React__default.createElement(
                    'g',
                    { 'data-name': 'refresh' },
                    React__default.createElement('rect', { width: '24', height: '24', opacity: '0' }),
                    React__default.createElement('path', { d: 'M20.3 13.43a1 1 0 0 0-1.25.65A7.14 7.14 0 0 1 12.18 19 7.1 7.1 0 0 1 5 12a7.1 7.1 0 0 1 7.18-7 7.26 7.26 0 0 1 4.65 1.67l-2.17-.36a1 1 0 0 0-1.15.83 1 1 0 0 0 .83 1.15l4.24.7h.17a1 1 0 0 0 .34-.06.33.33 0 0 0 .1-.06.78.78 0 0 0 .2-.11l.09-.11c0-.05.09-.09.13-.15s0-.1.05-.14a1.34 1.34 0 0 0 .07-.18l.75-4a1 1 0 0 0-2-.38l-.27 1.45A9.21 9.21 0 0 0 12.18 3 9.1 9.1 0 0 0 3 12a9.1 9.1 0 0 0 9.18 9A9.12 9.12 0 0 0 21 14.68a1 1 0 0 0-.7-1.25z' })
                  )
                )
              )
            ),
            React__default.createElement(
              'button',
              {
                type: 'button',
                'aria-label': 'play audio',
                onClick: this.playAudio,
                className: 'rnc-button',
                'data-testid': 'captcha-audio'
              },
              React__default.createElement(
                'svg',
                { xmlns: 'http://www.w3.org/2000/svg', viewBox: '0 0 24 24' },
                React__default.createElement(
                  'g',
                  { 'data-name': 'Layer 2' },
                  React__default.createElement(
                    'g',
                    { 'data-name': 'volume-up' },
                    React__default.createElement('rect', { width: '24', height: '24', opacity: '0' }),
                    React__default.createElement('path', { d: 'M18.28 8.37a1 1 0 1 0-1.56 1.26 4 4 0 0 1 0 4.74A1 1 0 0 0 17.5 16a1 1 0 0 0 .78-.37 6 6 0 0 0 0-7.26z' }),
                    React__default.createElement('path', { d: 'M19.64 5.23a1 1 0 1 0-1.28 1.54A6.8 6.8 0 0 1 21 12a6.8 6.8 0 0 1-2.64 5.23 1 1 0 0 0-.13 1.41A1 1 0 0 0 19 19a1 1 0 0 0 .64-.23A8.75 8.75 0 0 0 23 12a8.75 8.75 0 0 0-3.36-6.77z' }),
                    React__default.createElement('path', { d: 'M15 3.12a1 1 0 0 0-1 0L7.52 7.57h-5a1 1 0 0 0-1 1v6.86a1 1 0 0 0 1 1h5l6.41 4.4a1.06 1.06 0 0 0 .57.17 1 1 0 0 0 1-1V4a1 1 0 0 0-.5-.88zm-1.47 15L8.4 14.6a1 1 0 0 0-.57-.17H3.5V9.57h4.33a1 1 0 0 0 .57-.17l5.1-3.5z' })
                  )
                )
              )
            )
          )
        ),
        React__default.createElement('input', {
          value: input,
          onChange: this.handleChange,
          placeholder: placeholder,
          className: 'rnc-input',
          'data-testid': 'captcha-input'
        })
      );
    }
  }]);
  return Captcha;
}(React.Component);

Captcha.defaultProps = {
  placeholder: 'Insert captcha',
  length: 6
};

Captcha.propTypes = {
  onChange: PropTypes.func.isRequired,
  placeholder: PropTypes.string,
  length: PropTypes.number
};

module.exports = Captcha;
//# sourceMappingURL=captcha.js.map
